"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Generated by CoffeeScript 2.7.0
(function () {
  // Functions
  var age,
      ages,
      all,
      author,
      awardMedals,
      bitList,
      child,
      contenders,
      copy,
      countdown,
      courses,
      cube,
      currentUser,
      dish,
      eat,
      end,
      evens,
      family,
      filename,
      food,
      foods,
      gold,
      html,
      i,
      j,
      job,
      k,
      key,
      l,
      len,
      len1,
      len2,
      len3,
      list,
      lorem,
      lyrics,
      m,
      married,
      me,
      menu,
      middle,
      name,
      names,
      num,
      numbers,
      popular,
      printName,
      quote,
      ref,
      ref1,
      rest,
      sentence,
      silver,
      singers,
      square,
      start,
      unwanted,
      user,
      value,
      x,
      yearsOld,
      hasProp = {}.hasOwnProperty,
      splice = [].splice;

  square = function square(x) {
    return x * x;
  };

  cube = function cube(x) {
    return square(x * x);
  }; //console.log square 7
  //console.log cube 9


  printName = function printName() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Angel";
    return "Welcome ".concat(name, " :)");
  }; //console.log printName 'Carlos'
  //console.log printName()
  // Strings


  author = 'Angel';
  quote = "A picture is more than this ... ".concat(author);
  sentence = "".concat(22 / 7, " is a godd aproximation to pi number"); //console.log author
  //console.log quote
  //console.log sentence

  lorem = "lorem sdafsdaf fsd sdfsfsfd sdafsdfsadf asdfsadfsdf"; //console.log lorem

  html = "map --> how to mke money\n  step 2 --> how to destroy\nstep 3 -> life is hapiness"; //console.log html
  // Objects and Arrays

  names = ['angel', 'carlos', 'juan', 'pedro'];
  singers = {
    Maluma: 'Pop',
    Elvis: 'Rock'
  };
  bitList = [1, 0, 1, 0, 0, 0, 1, 0, 1];
  family = {
    cousin: {
      name: 'Carla',
      age: 30
    },
    mother: {
      name: 'Lourdes',
      age: 60
    }
  }; //console.log names
  //console.log singers
  //console.log bitList
  //console.log family
  // Shortcut Objects

  name = 'Angel';
  age = 25;
  job = 'Software Developer';
  married = false;
  me = {
    name: name,
    age: age,
    job: job,
    married: married
  };

  if (true) {
    //console.log me
    // Comments
    // one line comment

    /*
      Multiple line Comment
      lorem lorem lorem
      lore lorem lorem
    */
    // If, else, conditionals
    name = 'Angel';
  }

  console.log(name);

  if (name = 'Angel' && name.length > 2) {
    console.log('I like my name');
  } else {
    console.log(':(');
  }

  name = 'Angel'.length > 2 ? 'Angel :)' : 'Angel :(';
  console.log(name); // Rest parameter/ Spread Syntax

  gold = silver = rest = 'unknown';

  awardMedals = function awardMedals(first, second) {
    gold = first;
    silver = second;

    for (var _len = arguments.length, others = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      others[_key - 2] = arguments[_key];
    }

    return rest = others;
  };

  contenders = ["Michael Phelps", "Liu Xiang", "Yao Ming", "Allyson Felix", "Shawn Johnson", "Roman Sebrle", "Guo Jingjing", "Tyson Gay", "Asafa Powell", "Usain Bolt"];
  awardMedals.apply(void 0, _toConsumableArray(contenders));
  console.log("Gold: ".concat(gold, "\nSilver: ").concat(silver, "\nThe Field: ").concat(rest.join(' - ')));
  popular = ['pepperoni', 'sausage', 'cheese'];
  unwanted = ['anchovies', 'olives'];
  all = [].concat(_toConsumableArray(popular), _toConsumableArray(unwanted), ['mushrooms']);
  console.log(all);
  user = {
    name: 'Angel',
    job: 'Software Developer'
  };
  currentUser = _objectSpread(_objectSpread({}, user), {}, {
    status: 'no married'
  });
  console.log(currentUser); // Loops and Comprehensions

  eat = function eat(food) {
    return console.log("".concat(food, " eaten."));
  };

  ref = ['toast', 'cheese', 'wine'];

  for (j = 0, len = ref.length; j < len; j++) {
    food = ref[j];
    eat(food);
  }

  courses = ['greens', 'caviar', 'truffles', 'roast', 'cake'];

  menu = function menu(i, dish) {
    return console.log("Menu Item ".concat(i, ": ").concat(dish));
  };

  for (i = k = 0, len1 = courses.length; k < len1; i = ++k) {
    dish = courses[i];
    menu(i + 1, dish);
  }

  foods = ['broccoli', 'spinach', 'chocolate'];

  for (l = 0, len2 = foods.length; l < len2; l++) {
    food = foods[l];

    if (food !== 'chocolate') {
      eat(food);
    }
  } // Range


  countdown = function () {
    var m, results;
    results = [];

    for (num = m = 10; m >= 1; num = --m) {
      results.push(num);
    }

    return results;
  }();

  console.log(countdown);

  evens = function () {
    var m, results;
    results = [];

    for (x = m = 0; m <= 10; x = m += 2) {
      results.push(x);
    }

    return results;
  }();

  console.log(evens); // Iterate over objects

  yearsOld = {
    max: 10,
    ida: 9,
    tim: 11
  };

  ages = function () {
    var results;
    results = [];

    for (child in yearsOld) {
      age = yearsOld[child];
      results.push("".concat(child, " is ").concat(age));
    }

    return results;
  }();

  console.log(ages);

  ages = function () {
    var results;
    results = [];

    for (key in yearsOld) {
      if (!hasProp.call(yearsOld, key)) continue;
      value = yearsOld[key];
      results.push("".concat(key, " is ").concat(value));
    }

    return results;
  }();

  console.log(ages); // While
  //if studyingEconomics
  //  buy()  while supply > demand
  //  sell() until supply > demand

  num = 6;

  lyrics = function () {
    var results;
    results = [];

    while (num -= 1) {
      results.push("".concat(num, " little monkeys, jumping on the bed. One fell out and bumped his head."));
    }

    return results;
  }();

  console.log(lyrics); // Call claused functions into others DO

  list = ['.DS_Store', 'Thumbs.db', 'ehthumbs.db', 'doc.txt', 'main.ts', 'db.mysql'];

  for (m = 0, len3 = list.length; m < len3; m++) {
    filename = list[m];

    (function (filename) {
      if (filename !== '.DS_Store' && filename !== 'Thumbs.db' && filename !== 'ehthumbs.db') {
        return console.log(filename);
      }
    })(filename);
  } // Array slicing and splicing with ranges


  numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];
  start = numbers.slice(0, 3);
  middle = numbers.slice(3, -2);
  end = numbers.slice(-2);
  copy = numbers.slice(0);
  console.log(start, middle, end, copy);
  numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
  splice.apply(numbers, [3, 4].concat(ref1 = [-3, -4, -5, -6])), ref1;
  console.log(numbers);
}).call(void 0);